========== Création et configuration initiale du serveur ==========
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04

1 - Parametrer le projet et droplet 
2 - Créer la clef ssh (https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/create-with-openssh/)
	- cmd: ssh-keygen (créer une nouvelle clef)
	- On peut aussi récuperer une ancienne sur user/.ssh/id_rsa
	- c/c sur la fenêtre, fichier id_rsa.pub
3 - Se connecter en tant que root via ssh
	- cmd: root@ip_droplet
4 - Créer un nouveau compte utilisateur via root
	- cmd: adduser name_user
	- Ajoutez un mot de passe si besoin
5 - Donner les droits root à l'utilisateur
	- cmd: usermod -aG sudo name_user
6 - Copier la clef ssh sur le serveur
	- Change le repertoire utilisateur: 
		su - name_user
	- Créer le repertoire .ssh et restreindre ses droits:
		mkdir ~/.ssh
		chmod 700 ~/.ssh
	- Créer le fichier: 
		nano ~/.ssh/authorized_keys
	- c/c la clef ssh dedans et sauvegarder + quitter le fichier
	- Restreindre ses droits d'accès: 
		chmod 600 ~/.ssh/authorized_keys
	- cmd: exit (pour retourner en tant que root)

7 - Garder seulement l'authentification ssh
	- sudo nano /etc/ssh/sshd_config (on ouvre le fichier de config)
	- Trouver la ligne "PasswordAuthentication" et mettre la valeur "no"
	- De même pour "PubkeyAuthentication yes" et "ChallengeResponseAuthentication no"
	- sudo systemctl reload sshd (recharge le daemon ssh)
8 - Se connecter avec le compte utilisateur
	- cmd: user_name@ip_droplet
9 - Créer un pare-feu
	- sudo ufw allow OpenSSH (autorise les connection ssh)
	- sudo ufw enable (active le pare-feu)

========== Lier un nom de domaine au serveur (Gandi) =========
https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars

1 - Sur le dashboard de Gandi, allez sur votre nom de domaine et "serveur de noms"
2 - Cliquez sur "Modifier" et changez par: (en selectionnant "externe")
    ns1.digitalocean.com
    ns2.digitalocean.com
    ns3.digitalocean.com

https://www.digitalocean.com/docs/networking/dns/how-to/manage-records/
4 - Ajouter le nom de domaine à lier sur DigitalOcean via l'onglet 'Networking'
5 - Créer un DNS (A) en entrant @ pour l'host name et en selectionnant le droplet cible (les droplet n'ont que ipv4)

========== Installer et configurer Nginx (+certificat SSL) ==========
https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04

1 - Installer Nginx sur le serveur
	- sudo apt-get update (on met à jour les modules si jamais)
	- sudo apt-get install nginx
2 - Mettre à jour le pare-feu
	- sudo ufw allow 'Nginx FULL' (active HTTP et HTTPS)
3 - Verifier le serveur web
	- systemctl status nginx (pour verifier si le service tourne)
	- http://nom_de_domaine.ext -> devrait vous diriger sur nginx
4 - Diverses commandes:
	- sudo systemctl stop nginx (stop le serveur)
	- sudo systemctl start nginx (lance le serveur)
	- sudo systemctl restart nginx (pour restart le serveur)
	- sudo systemctl reload nginx (pour juste mettre à jour la config sans relancer)

https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04
5 - Installer Certbot (renouvellement de certificat SSL)
	- sudo add-apt-repository ppa:certbot/certbot (on ajoute le dépot)
	- sudo apt-get update (met à jour les infos de package)
	- sudo apt-get install python3-certbot-nginx (installe certbot)
6 - Parametrer Nginx
	- sudo nano /etc/nginx/sites-available/default (ouvre l'editeur)
	- Trouver la ligne "server_name" et mettre vos noms de domaine
		"server_name exemple.com www.exemple.com"
	- sudo nginx -t (verifie les erreurs de syntaxe ou autre)
	- sudo systemctl reload nginx (met à jour la config)
7 - Obtenir un certificat SSL
	- sudo certbot --nginx -d example.com -d www.example.com
	- Remplir les champs et choisissez de redirigez les requêtes http vers https
8 - Renouvellement automatique des certificats SSL
	- Le renouvellement automatique est normalement activé par défaut
	- sudo certbot renew --dry-run (pour simuler un renouvellement)

========== Mettre le site sur le serveur ==========
https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04

1 - Installer node.js
	- cd ~ (on se place à la racine du compte)
	- curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh
	- sudo bash nodesource_setup.sh (script pour ajouter nodeJS 12)
	- sudo apt-get install nodejs (install nodejs)
	- sudo apt-get install build-essential (installe divers package essentiels)
	- sudo apt-get install npm (insall npm)
2 - Verifier la version de NodeJS (si besoin)
	- npm cache clean -f (on vide le cache au cas ou)
	- sudo npm install -g n (install n, le gestionnaire de version node)
	- sudo n stable (installe la dernière version stable de node)
	- node -v (si on veut regarder la version actuelle de node)
3 - Cloner le repertoire git du site surle serveur
	- git clone https://github.com/Hutsku/StrangeDay.git (exemple)
	- git init (initialize le repo, à faire à la racine du projet)
	- sudo git pull (si on veut synchroniser le projet avec github)
4 - Installer PM2, pour daemonizer le site
	- sudo npm install -g pm2 (installe pm2)
	- pm2 start index.js (lance le daemon)
	- pm2 stop id_app (stop le process)
	- pm2 restart id_app (restart le process)
	- pm2 list (liste des process)
5 - Configurer Nginx comme reverse-proxy (écoute en localhost)
	- sudo nano /etc/nginx/sites-available/default (ouvre l'editeur)
	- Remplacez le bloc "location /" par: (les requêtes sont redirigées vers localhost:8080)
	{
            proxy_pass http://localhost:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
    	}
	- sudo nginx -t (on verifie le fichier)
	- sudo systemctl restart nginx (et on relance nginx)

========== Configurer le site (mysql et vault) ==========
https://medium.com/@eligijuskrepsta/setting-up-node-mysql-and-nginx-on-digital-ocean-247546be20df

1 - Installer MySQL
	- sudo apt-get install mysql-server (installe mysql)	
	- sudo mysql (accède à la BDD)
2 - Créer et remplir la BDD
	- SHOW DATABASES; (montre les base de données)
	- CREATE DATABASE database_name; (créer une BDD)
	- USE db_name; (on se place dans la BDD)
	- SHOW TABLES; (affiche toutes les tables de la BDD)
	- CREATE TABLE potluck (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
		name VARCHAR(20),
		food VARCHAR(30),
		confirmed CHAR(1), 
		signup_date DATE
	  ); (exemple, créer une table avec ses colonnes)

========== Créer et configurer le Vault ==========
https://learn.hashicorp.com/tutorials/vault/getting-started-dev-server?in=vault/getting-started

1 - Installer Vault
	- curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
	- sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
	- sudo apt-get install vault
2 - Initialisation et config du vault
	- export VAULT_ADDR='http://127.0.0.1:8200' (on stocke en variable l'adresse)
	- mkdir -p vault/data (on créer le dossier de stockage du vault)
	- vault server -config=StrangeDay/config.hcl (on lui communique le fichier de config)
		storage "raft" {
  			path    = "./vault/data"
  			node_id = "node1"
		}

		listener "tcp" {
  			address     = "127.0.0.1:8200"
  			tls_disable = 1
		}

		api_addr = "http://127.0.0.1:8200"
		cluster_addr = "https://127.0.0.1:8201"
		ui = true

	- Si un service est déjà en route sur ce port: 
		-> sudo lsof -i :8200 (pour connaître le nom du service)
		-> pkill <name> (arrête le service sur ce port)
	- vault operator init (Stocker les unseal keys ainsi que le root token qui s'affichent)
	- vault operator unseal (lui passer une unseal key)
	- Repeter l'opération encore 2 fois avec 2 clefs differentes
	- vault login <root token> (on se log avec le token root)
	- Si on a besoin de sceller le vault en cas d'urgence: 
		-> vault operator seal

3 - Liste des commandes vault
	- vault secrets list -> Renvoit la liste des bases
	- vault secrets enable -path=strangeday kv -> créer la base 'strangeday' via le moteur kv
	- vault secrets disable strangeday/ -> Supprime la base et tout les champs contenus	

	- vault kv list strangeday/ -> Renvoit la liste des champs d'une base
	- vault kv put strangeday/test foo=a  -> Créer un secret (valeur d'exemple)
	- vault kv put strangeday/test foo=a faa=b -> on peut créer plusieurs valeurs 
	- vault kv get strangeday/test        -> renvoit la liste des variables stockés
	- vault kv -field=foo strangeday/test -> renvoit la valeur d'une variable
	- vault kv delete strangeday/test     -> détruit les variables stockés
	
	- vault token create -> Créer un token fils du token root
	- vault token revoke <token> -> revoque le token cible (revoque également les token fils)
	- vault login <token> -> se log avec le token entré




